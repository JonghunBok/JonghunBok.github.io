import{d as g,u,c as l,o as n,a,F as b,r as m,b as D,n as w,t as i,_ as P,e as I,f as y,g as S,h as M,i as X,j as x,k as A}from"./framework.BuAPHyTs.js";const q={class:"inline-block"},V={class:"list-none flex flex-row p-0 mt-3 xl:flex-col xl:mt-4"},j=["href"],$=g({__name:"Nav",setup(C){const{theme:h,page:p,frontmatter:c}=u(),s=o=>p.path===o.link;return(o,d)=>(n(),l("div",q,[a("ul",V,[(n(!0),l(b,null,m(D(h).nav,r=>(n(),l("li",{class:w(["w-16 block bg-white py-2 px-2 mb-2 ml-2 text-center text-black overflow-hidden rounded",{shadow:s(r),"shadow-md":!s(r)}])},[a("a",{class:w({"cursor-default":s(r)}),href:r.link},i(r.text),11,j)],2))),256))])]))}}),k=JSON.parse(`[{"title":"Vue 3: 디렉티브(Directive)를 이해해보자","url":"/posts/vue/directive-is-an-assitent.html","excerpt":"","date":{"time":1682945513935,"string":"May 1, 2023"}},{"title":"FE 개발자와 터미널 - 02","url":"/posts/terminal-for-fe/02.html","excerpt":"<h2 id=\\"터미널-사용과-데이터-랭글링\\" tabindex=\\"-1\\">터미널 사용과 데이터 랭글링 <a class=\\"header-anchor\\" href=\\"#터미널-사용과-데이터-랭글링\\" aria-label=\\"Permalink to “터미널 사용과 데이터 랭글링”\\">&#8203;</a></h2>\\n<p><a href=\\"./01.html\\">이전 글</a>에서 살펴봤듯이,\\n일상 업무에서의 적극적인 터미널 사용은 <strong>단순 반복 작업을 논리 구성작업</strong>으로 바꾸려는 시도입니다.\\n이는 사람이 할 일을 컴퓨터에게 시킨다는 점에서 <strong>자동화</strong>입니다.\\n컴퓨터 안에서 모든 자원은 데이터라는 점과 한 데이터를 원하는 포맷으로 탈바꿈 한다는 점에서 <strong>데이터 랭글링</strong>이기도 합니다.\\n이번 글에서는 현실적인 사례를 들어, 어떻게 일상 업무에 자동화와 데이터 랭글링이 적용될 수 있는지 살펴보는 것을 목표로 합니다.</p>\\n<div  class=\\"info custom-block\\"><p class=\\"custom-block-title\\">데이터 랭글링이란?</p>\\n<p>기존 데이터를 원하는 형식으로 재구성하는 작업을 데이터 랭글링<sub>data wrangling</sub> 또는 데이터 먼징<sub>data munging</sub>이라고 한다.</p>\\n<p>데이터 사이언스 분야에서 주로 사용하는 용어이며, 사이즈가 큰 데이터 데이터 랭글링을 위해서는 <a href=\\"https://www.geeksforgeeks.org/data-wrangling-in-python/\\" target=\\"_blank\\" rel=\\"noreferrer\\">pandas</a> 등 별도의 툴을 사용하는 것이 좋다.</p>\\n<ul>\\n<li>참조: <a href=\\"https://en.wikipedia.org/wiki/Data_wrangling#:~:text=Data%20wrangling%2C%20sometimes%20referred%20to,downstream%20purposes%20such%20as%20analytics.\\" target=\\"_blank\\" rel=\\"noreferrer\\">Wikipediea - Data Wrangling</a></li>\\n</ul>\\n</div>\\n<h2 id=\\"실제-사용-예시\\" tabindex=\\"-1\\">실제 사용 예시 <a class=\\"header-anchor\\" href=\\"#실제-사용-예시\\" aria-label=\\"Permalink to “실제 사용 예시”\\">&#8203;</a></h2>\\n<h3 id=\\"웹-호스팅-서버-매뉴얼-오퍼레이션\\" tabindex=\\"-1\\">웹 호스팅 서버 매뉴얼 오퍼레이션 <a class=\\"header-anchor\\" href=\\"#웹-호스팅-서버-매뉴얼-오퍼레이션\\" aria-label=\\"Permalink to “웹 호스팅 서버 매뉴얼 오퍼레이션”\\">&#8203;</a></h3>\\n<p>터미널 문해력은 VM 또는 컨테이너에 직접 접속해야 하는 상황에서 더욱 빛이 납니다.\\nCI/CD 툴의 발전으로 일반적인 상황에서 FE 개발자가 직접 웹사이트가 호스팅되고 있는 서버에 접속할 일은 없지만, 다음 상황에서는 여전히 매뉴얼 오퍼레이션이 필요합니다:</p>\\n<ul>\\n<li><strong>레거시 시스템을 운영</strong>하거나,</li>\\n<li>비정상적인 상황에서 <strong>긴급 대응이 필요</strong>한 경우,</li>\\n<li>또는 CI/CD 파이프라인 구축 시 의도한 대로 <strong>파이프라인이 정상 동작하는지 확인</strong>하기 위해서</li>\\n</ul>\\n<p>최종 호스팅 서버에 직접 접속하기도 합니다.</p>\\n<h4 id=\\"가정-레거시-시스템의-nginx-conf를-수정하고-싶다\\" tabindex=\\"-1\\">가정: 레거시 시스템의 <code>nginx.conf</code>를 수정하고 싶다. <a class=\\"header-anchor\\" href=\\"#가정-레거시-시스템의-nginx-conf를-수정하고-싶다\\" aria-label=\\"Permalink to “가정: 레거시 시스템의 nginx.conf를 수정하고 싶다.”\\">&#8203;</a></h4>\\n<p>우선, 이런 일은 생기지 않아야 합니다.\\nconfig 파일을 서버에 붙어 직접 수정해야 하는 일이 생겼다면,\\nCI/CD 파이프라인을 정상화의 우선순위를 높여 피어 리뷰를 통해 휴먼 에러를 방지하세요.</p>\\n<p>반드시 매뉴얼하게 수정해야 하는 상황이라면, <code>diff</code> 명령어를 확인해서 변경사항을 확인해보세요.</p>\\n<div class=\\"language-bash\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">bash</span><pre class=\\"shiki dark-plus\\" style=\\"background-color:#1E1E1E;color:#D4D4D4\\" tabindex=\\"0\\" dir=\\"ltr\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"color:#6A9955\\"># nginx 설정 파일이 있는 곳으로 이동</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">cd</span><span style=\\"color:#CE9178\\"> /etc/nginx</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 매뉴얼 오퍼레이션을 진행할 때는 항상 중요 파일을 백업하세요.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">cp</span><span style=\\"color:#CE9178\\"> nginx.conf</span><span style=\\"color:#CE9178\\"> nginx.conf.bk</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 선호하는 에디터를 통해 설정 파일을 변경하세요.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">vi</span><span style=\\"color:#CE9178\\"> nginx.conf</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 혹시나 실수로 원하지 않은 변경이 가해지진 않았는지 확인하세요.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># diff 명령어는 두 파일 사이의 서로 다른 라인을 출력해줍니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">diff</span><span style=\\"color:#CE9178\\"> nginx.conf.bk</span><span style=\\"color:#CE9178\\"> nginx.conf</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># nginx 재시작을 합니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">systemctl</span><span style=\\"color:#CE9178\\"> restart</span><span style=\\"color:#CE9178\\"> nginx.service</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## 또는</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">service</span><span style=\\"color:#CE9178\\"> nginx</span><span style=\\"color:#CE9178\\"> reload</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## 또는</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">nginx</span><span style=\\"color:#569CD6\\"> -s</span><span style=\\"color:#CE9178\\"> reload</span></span></code></pre>\\n</div><blockquote>\\n<p>눈으로 확인하는 것만으로는 안전하지 않습니다.\\n매뉴얼 오퍼레이션 만으로도 충분히 위험하니, 컴퓨터에게 비교를 시켜 정말로 원하는 변경만 되었는지 확인하세요.</p>\\n</blockquote>\\n<h4 id=\\"가정-로그를-점검하고-싶다\\" tabindex=\\"-1\\">가정: 로그를 점검하고 싶다. <a class=\\"header-anchor\\" href=\\"#가정-로그를-점검하고-싶다\\" aria-label=\\"Permalink to “가정: 로그를 점검하고 싶다.”\\">&#8203;</a></h4>\\n<p>웹서버에 접속한 김에 로그까지 보도록 합시다.\\n로그는 보통 <code>/var/log/</code> 위치에 저장됩니다.</p>\\n<ul>\\n<li><strong>404 상태코드는 얼마나 많을까?</strong></li>\\n</ul>\\n<div class=\\"language-bash\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">bash</span><pre class=\\"shiki dark-plus\\" style=\\"background-color:#1E1E1E;color:#D4D4D4\\" tabindex=\\"0\\" dir=\\"ltr\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"color:#6A9955\\"># nginx 로그를 보고 싶다면, 다음 위치로 이동합니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">cd</span><span style=\\"color:#CE9178\\"> /var/log/nginx</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 액세스 로그 중 '500'이라는 문자를 포함하는 로그를 출력합니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">grep</span><span style=\\"color:#B5CEA8\\"> 404</span><span style=\\"color:#CE9178\\"> access.log</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## 또는</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">cat</span><span style=\\"color:#CE9178\\"> access.log</span><span style=\\"color:#D4D4D4\\"> | </span><span style=\\"color:#DCDCAA\\">grep</span><span style=\\"color:#B5CEA8\\"> 404</span></span></code></pre>\\n</div><p>404 상태 코드를 받은 요청에 대한 엑세스 로그를 쉽게 볼 수 있습니다.\\n간단한 통계를 통해 엄격하진 않지만 대략적인 서비스 상황을 알 수도 있습니다.</p>\\n<div class=\\"language-bash\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">bash</span><pre class=\\"shiki dark-plus\\" style=\\"background-color:#1E1E1E;color:#D4D4D4\\" tabindex=\\"0\\" dir=\\"ltr\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"color:#6A9955\\"># 액세스 로그의 라인 수를 얻고,</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">cat</span><span style=\\"color:#CE9178\\"> access.log</span><span style=\\"color:#D4D4D4\\"> | </span><span style=\\"color:#DCDCAA\\">wc</span><span style=\\"color:#569CD6\\"> -l</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 404 응답의 라인 수를 얻으면 404 응답의 비유을 알 수 있습니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">cat</span><span style=\\"color:#CE9178\\"> access.log</span><span style=\\"color:#D4D4D4\\"> | </span><span style=\\"color:#DCDCAA\\">grep</span><span style=\\"color:#B5CEA8\\"> 404</span><span style=\\"color:#D4D4D4\\"> | </span><span style=\\"color:#DCDCAA\\">wc</span><span style=\\"color:#569CD6\\"> -l</span></span></code></pre>\\n</div><p>404 코드 뿐만 아니라 주요 점검 대상들에 대해서 간단한 질의를 할 수 있습니다.</p>\\n<div class=\\"language-bash\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">bash</span><pre class=\\"shiki dark-plus\\" style=\\"background-color:#1E1E1E;color:#D4D4D4\\" tabindex=\\"0\\" dir=\\"ltr\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"color:#6A9955\\">## 권한 없는 요청이 얼마나 자주 일어나고 있나요?</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">cat</span><span style=\\"color:#CE9178\\"> access.log</span><span style=\\"color:#D4D4D4\\"> | </span><span style=\\"color:#DCDCAA\\">grep</span><span style=\\"color:#B5CEA8\\"> 401</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## 특정 날짜의 로그를 보고 싶은가요?</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">cat</span><span style=\\"color:#CE9178\\"> access.log</span><span style=\\"color:#D4D4D4\\"> | </span><span style=\\"color:#DCDCAA\\">grep</span><span style=\\"color:#CE9178\\"> 2014/11/27</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## 특정 날짜에 일어난 POST 요청 로그를 보고 싶은가요?</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## 필터링은 원하는 만큼 추가할 수 있습니다!</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">cat</span><span style=\\"color:#CE9178\\"> access.log</span><span style=\\"color:#D4D4D4\\"> | </span><span style=\\"color:#DCDCAA\\">grep</span><span style=\\"color:#CE9178\\"> 2014/11/27</span><span style=\\"color:#D4D4D4\\"> | </span><span style=\\"color:#DCDCAA\\">grep</span><span style=\\"color:#CE9178\\"> POST</span></span></code></pre>\\n</div><ul>\\n<li><strong>내 웹서비스가 제대로 요청을 받고 있는건지 알고 싶다.</strong></li>\\n</ul>\\n<p>로그는 파일 형식으로 저장되고, 새로운 로그는 한 파일에 이어쓰기 형식으로 더해집니다.</p>\\n<div class=\\"language-bash\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">bash</span><pre class=\\"shiki dark-plus\\" style=\\"background-color:#1E1E1E;color:#D4D4D4\\" tabindex=\\"0\\" dir=\\"ltr\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"color:#6A9955\\"># 로컬 머신에서 일정한 주기로 새로 설정한 웹서비스에 질의를 보낼 거에요.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">watch</span><span style=\\"color:#CE9178\\"> curl</span><span style=\\"color:#CE9178\\"> 'http://my-new-server'</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 각 요청이 얼마나 걸리는지 알고 싶어 time 명령어도 써보겠습니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">watch</span><span style=\\"color:#CE9178\\"> time</span><span style=\\"color:#CE9178\\"> curl</span><span style=\\"color:#CE9178\\"> 'http://my-new-server'</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## 오! 간이 응답속도 모니터링으로 쓸 수도 있겠네요~</span></span></code></pre>\\n</div><div class=\\"language-bash\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">bash</span><pre class=\\"shiki dark-plus\\" style=\\"background-color:#1E1E1E;color:#D4D4D4\\" tabindex=\\"0\\" dir=\\"ltr\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"color:#6A9955\\"># 서버에 접속해 액세스 로그가 잘 쌓이고 있는지 확인할 거에요.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## -f / --follow 옵션을 통해 파일이 커지는 것을 따라가며 출력할 수 있습니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">tail</span><span style=\\"color:#569CD6\\"> -f</span><span style=\\"color:#CE9178\\"> /var/log/nginx/access.log</span></span></code></pre>\\n</div><p>예시는 모두 nginx 서버의 로그였지만,\\n<code>docker logs</code> 또는 <code>kubectl logs</code> 에도 똑같이 사용할 수 있는 패턴을 소개드렸습니다.\\n로그 스트림에 숨어 있는 정보를 <code>grep</code>으로 찾아내보세요!</p>\\n<h3 id=\\"ui-라이브러리의-인터페이스-변경-추적\\" tabindex=\\"-1\\">UI 라이브러리의 인터페이스 변경 추적 <a class=\\"header-anchor\\" href=\\"#ui-라이브러리의-인터페이스-변경-추적\\" aria-label=\\"Permalink to “UI 라이브러리의 인터페이스 변경 추적”\\">&#8203;</a></h3>\\n<p>빠른 개발을 위해 UI 라이브러리 하나를 채택해 사용하고 있다면, 라이브러리의 변경을 추적하는 일은 중요합니다.\\n더 빠르게 새로운 컴포넌트나 기능을 사용하고 싶을 수도 있고,\\n이미 사용하고 있는 컴포넌트에 브레이킹 체인지가 있어 대응해야 할 수도 있습니다.</p>\\n<p>사용하는 라이브러리에서 항상 디테일한 체인지로그를 제공하면 업데이트를 적용하는데 큰 도움이 될 것입니다.\\n하지만, 다음의 경우가 있을 수 있습니다:</p>\\n<ul>\\n<li>체인지로그가 충분한 정보를 주지 않거나, 존재하지 않는다.</li>\\n<li>내가 사용하는 컴포넌트에 대해서만 변경내역을 알고 싶은데, 체인지로그가 너무 많고 디테일하다.</li>\\n</ul>\\n<p>그렇다면 다음 명령어를 참고해, 원하는 변경사항만 알아보세요!</p>\\n<div class=\\"language-bash\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">bash</span><pre class=\\"shiki dark-plus\\" style=\\"background-color:#1E1E1E;color:#D4D4D4\\" tabindex=\\"0\\" dir=\\"ltr\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"color:#6A9955\\"># naive-ui 를 예시로 사용합니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">git</span><span style=\\"color:#CE9178\\"> clone</span><span style=\\"color:#CE9178\\"> https://github.com/tusen-ai/naive-ui.git</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">cd</span><span style=\\"color:#CE9178\\"> naive-ui</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 현재 사용하고 있는 버전과 업데이트 타겟이 되는 버전이 태깅되어 있는지 확인하세요.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## 예시에서는 v2.0.0 에서 v2.3.0 으로 업데이트하려는 상황을 가정합니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">git</span><span style=\\"color:#CE9178\\"> tag</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># git-diff를 통해 어떤 변경이 있었는지 보려고 했는데, 너무 많은 변경이 있었습니다!</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## git-diff의 출력이 무려 19182 줄이나 되네요!</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## 더 좋은 방법이 필요합니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">git</span><span style=\\"color:#CE9178\\"> diff</span><span style=\\"color:#CE9178\\"> v2.0.0</span><span style=\\"color:#CE9178\\"> v2.3.0</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 이번엔 파일 이름과 변경 상태만 봅시다!</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">git</span><span style=\\"color:#CE9178\\"> diff</span><span style=\\"color:#569CD6\\"> --name-status</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># output:</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## ...</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## A       src/ellipsis/src/index.tsx</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## A       src/ellipsis/src/styles/index.cssr.ts</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## A       src/ellipsis/styles/dark.ts</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## A       src/ellipsis/styles/index.ts</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## A       src/ellipsis/styles/light.ts</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## D       src/empty/demos/index.entry</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## M       src/empty/src/styles/index.cssr.ts</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## M       src/empty/styles/_common.ts</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## M       src/form/demos/enUS/async.demo.md</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## M       src/form/demos/enUS/custom-rule.demo.md</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## ...</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 여전히 너무 많습니다. 무려 461개의 파일이 변경되었나봐요.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## .md 로 끝나는 마크다운 파일들은 필요 없다는 것을 깨달았습니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## 그리고 path에 'demo'나 'tests'가 들어가 있는 파일들도 보고 싶지 않네요.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## -v / --invert-match 옵션을 사용해 원하지 않는 파일을 제외합니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">git</span><span style=\\"color:#CE9178\\"> diff</span><span style=\\"color:#569CD6\\"> --name-status</span><span style=\\"color:#D4D4D4\\"> | </span><span style=\\"color:#DCDCAA\\">grep</span><span style=\\"color:#569CD6\\"> -v</span><span style=\\"color:#CE9178\\"> .md</span><span style=\\"color:#D4D4D4\\"> | </span><span style=\\"color:#DCDCAA\\">grep</span><span style=\\"color:#569CD6\\"> -v</span><span style=\\"color:#CE9178\\"> demo</span><span style=\\"color:#D4D4D4\\"> | </span><span style=\\"color:#DCDCAA\\">grep</span><span style=\\"color:#569CD6\\"> -v</span><span style=\\"color:#CE9178\\"> tests</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 그리고 이 중에서 새로 더해지거나 없어진 파일은 관심 없고, 변경이 이루어진 파일만 보고 싶어요.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">git</span><span style=\\"color:#CE9178\\"> diff</span><span style=\\"color:#569CD6\\"> --name-status</span><span style=\\"color:#D4D4D4\\"> | </span><span style=\\"color:#DCDCAA\\">grep</span><span style=\\"color:#569CD6\\"> -v</span><span style=\\"color:#CE9178\\"> .md</span><span style=\\"color:#D4D4D4\\"> | </span><span style=\\"color:#DCDCAA\\">grep</span><span style=\\"color:#569CD6\\"> -v</span><span style=\\"color:#CE9178\\"> demo</span><span style=\\"color:#D4D4D4\\"> | </span><span style=\\"color:#DCDCAA\\">grep</span><span style=\\"color:#569CD6\\"> -v</span><span style=\\"color:#CE9178\\"> tests</span><span style=\\"color:#D4D4D4\\"> | </span><span style=\\"color:#DCDCAA\\">grep</span><span style=\\"color:#CE9178\\"> '^M'</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 이렇게 하고 나니, 111 줄의 파일만 남았습니다!</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## 이 정도 길이의 목록에서는 원하는 파일만 남기고 직접 삭제할 수 있겠네요!</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## 우선 이 파일들의 path만 저장하도록 합시다.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## awk '{print $2}' 는 각 라인에서 공백 문자로 나누었을 때 두번째 토큰만 출력합니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">git</span><span style=\\"color:#CE9178\\"> diff</span><span style=\\"color:#569CD6\\"> --name-status</span><span style=\\"color:#D4D4D4\\"> | </span><span style=\\"color:#DCDCAA\\">grep</span><span style=\\"color:#569CD6\\"> -v</span><span style=\\"color:#CE9178\\"> .md</span><span style=\\"color:#D4D4D4\\"> | </span><span style=\\"color:#DCDCAA\\">grep</span><span style=\\"color:#569CD6\\"> -v</span><span style=\\"color:#CE9178\\"> demo</span><span style=\\"color:#D4D4D4\\"> | </span><span style=\\"color:#DCDCAA\\">grep</span><span style=\\"color:#569CD6\\"> -v</span><span style=\\"color:#CE9178\\"> tests</span><span style=\\"color:#D4D4D4\\"> | </span><span style=\\"color:#DCDCAA\\">grep</span><span style=\\"color:#CE9178\\"> '^M'</span><span style=\\"color:#D4D4D4\\"> | </span><span style=\\"color:#DCDCAA\\">awk</span><span style=\\"color:#CE9178\\"> '{print $2}'</span><span style=\\"color:#D4D4D4\\"> > </span><span style=\\"color:#CE9178\\">interesting_files</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 이렇게 얻은 interesting_files 목록을 좀 더 다듬은 후에,</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## 코드 레벨에서 어떻게 바뀌었는지 살펴보아요.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## 우선 관심 대상인 파일들을 워크스페이스로 가지고 옵시다.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">git</span><span style=\\"color:#CE9178\\"> checkout</span><span style=\\"color:#CE9178\\"> v2.3.0</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># xargs를 통해 git diff 명령어에 관심있는 파일 목록을 인자로 넣어줍니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">cat</span><span style=\\"color:#CE9178\\"> interesting_files</span><span style=\\"color:#D4D4D4\\"> | </span><span style=\\"color:#DCDCAA\\">xargs</span><span style=\\"color:#CE9178\\"> git</span><span style=\\"color:#CE9178\\"> diff</span><span style=\\"color:#CE9178\\"> v2.0.0</span><span style=\\"color:#CE9178\\"> v.2.3.0</span></span></code></pre>\\n</div><p>시맨틱 버저닝을 준수하는 라이브러리에서는 이렇게까지 볼 필요는 없습니다.\\n하지만 아직 0.x.x 를 사용하는 라이브러리 또는 시맨틱 버저닝을 느슨하게 사용하는 라이브러리라면,\\n메이저 버전이 바뀌지 않아도 브레이킹 체인지가 있을 수 있습니다.\\n이런 경우가 생기면, 관심있는 컴포넌트에 대해서 어떤 변경이 있었는지 코드레벨에서 살펴보는 건 어떨까요?</p>\\n<h3 id=\\"복수의-n-5-리포에-pre-commit-정책을-적용시키기-위한-husky-설치\\" tabindex=\\"-1\\"><strong>복수의 (n &gt; 5) 리포에 pre-commit 정책을 적용시키기 위한 husky 설치</strong> <a class=\\"header-anchor\\" href=\\"#복수의-n-5-리포에-pre-commit-정책을-적용시키기-위한-husky-설치\\" aria-label=\\"Permalink to “복수의 (n &gt; 5) 리포에 pre-commit 정책을 적용시키기 위한 husky 설치”\\">&#8203;</a></h3>\\n<p>수많은 리포를 관리하고 있다면, 공통 설정을 추가하는 것이 곤혹스러울 수 있습니다.\\n공통 설정의 예로는 다음의 작업이 있을 수 있습니다:</p>\\n<ul>\\n<li><code>.github/</code> 디렉토리에 파일 추가하기:\\n<ul>\\n<li>기본 라벨을 추가하거나,</li>\\n<li>PR 템플릿을 추가하거나,</li>\\n<li>이슈 템플릿을 추가할 수도 있습니다.</li>\\n</ul>\\n</li>\\n<li>필요없는 브랜치 삭제하기\\n<ul>\\n<li>참조: <a href=\\"https://news.hada.io/topic?id=7933\\" target=\\"_blank\\" rel=\\"noreferrer\\">git gone - 원격에서 삭제된 브랜치를 모두 삭제하는 커스텀 명령어</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"https://github.com/typicode/husky\\" target=\\"_blank\\" rel=\\"noreferrer\\">husky</a>를 통해 git-hook 사용</li>\\n</ul>\\n<p>한두 개 리포에 위의 작업을 하는 것은 간단하고 오래 걸리지 않습니다.\\n하지만 수 많은 리포를 관리하는 입장에서는, 결과물의 임팩트에 비해 많은 리소스를 사용해야 하고 대단히 지루한 작업을 해야 합니다.\\n이럴 경우, 작업을 간단한 쉘스크립트로 자동화해보는 것은 어떤가요?</p>\\n<ol>\\n<li>\\n<p>기본 템플릿은 이렇습니다:</p>\\n<div class=\\"language-bash\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">bash</span><pre class=\\"shiki dark-plus\\" style=\\"background-color:#1E1E1E;color:#D4D4D4\\" tabindex=\\"0\\" dir=\\"ltr\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"color:#6A9955\\">#! /bin/bash</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## 이 라인은 shebang이라고 합니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## 어떤 인터프리터를 사용하는지 지정할 수 있습니다.</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 관리 대상인 리포의 목록을 만듭니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#9CDCFE\\">repos</span><span style=\\"color:#D4D4D4\\">=(</span><span style=\\"color:#CE9178\\">'repo1',</span><span style=\\"color:#CE9178\\"> 'path/to/repo2',</span><span style=\\"color:#CE9178\\"> 'repo3'</span><span style=\\"color:#D4D4D4\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">## 리포 목록을 순회하며 원하는 작업을 할 것입니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#C586C0\\">for</span><span style=\\"color:#9CDCFE\\"> repo</span><span style=\\"color:#C586C0\\"> in</span><span style=\\"color:#CE9178\\"> \\"\${</span><span style=\\"color:#9CDCFE\\">repos</span><span style=\\"color:#CE9178\\">[</span><span style=\\"color:#D4D4D4\\">@</span><span style=\\"color:#CE9178\\">]}\\"</span><span style=\\"color:#D4D4D4\\">; </span><span style=\\"color:#C586C0\\">do</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">  echo</span><span style=\\"color:#9CDCFE\\"> $repo</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">  cd</span><span style=\\"color:#9CDCFE\\"> $repo</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">  # 이 위치에 공통 작업을 넣으시면 됩니다!</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\">  # \`cd -\`는 바로 이전에 있었던 디렉토리로 위치를 옮겨줍니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">  cd</span><span style=\\"color:#CE9178\\"> -</span></span>\\n<span class=\\"line\\"><span style=\\"color:#C586C0\\">done</span></span></code></pre>\\n</div></li>\\n<li>\\n<p>필요 툴을 사용해 필요한 작업을 추가합니다.</p>\\n<p>코드 수정이 아니라면, 대체로 cli 툴을 사용해 작업 가능합니다.</p>\\n<ul>\\n<li>git</li>\\n</ul>\\n<div class=\\"language-bash\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">bash</span><pre class=\\"shiki dark-plus\\" style=\\"background-color:#1E1E1E;color:#D4D4D4\\" tabindex=\\"0\\" dir=\\"ltr\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"color:#6A9955\\"># 미처 커밋 못한 작업분이 있다면 미리 stash 해놓습니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">git</span><span style=\\"color:#CE9178\\"> stash</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 변경의 베이스를 설정합니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">git</span><span style=\\"color:#CE9178\\"> fetch</span><span style=\\"color:#CE9178\\"> origin</span><span style=\\"color:#CE9178\\"> develop</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">git</span><span style=\\"color:#CE9178\\"> checkout</span><span style=\\"color:#CE9178\\"> origin/develop</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 작업을 위한 브랜치를 생성합니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">git</span><span style=\\"color:#CE9178\\"> checkout</span><span style=\\"color:#569CD6\\"> -b</span><span style=\\"color:#CE9178\\"> chore/update-commitlint</span></span></code></pre>\\n</div><ul>\\n<li>nvm / yarn / npm</li>\\n</ul>\\n<div class=\\"language-bash\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">bash</span><pre class=\\"shiki dark-plus\\" style=\\"background-color:#1E1E1E;color:#D4D4D4\\" tabindex=\\"0\\" dir=\\"ltr\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"color:#DCDCAA\\">nvm</span><span style=\\"color:#CE9178\\"> use</span><span style=\\"color:#B5CEA8\\"> 16</span><span style=\\"color:#6A9955\\"> # 사용하는 node 버전 설정</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">yarn</span><span style=\\"color:#CE9178\\"> add</span><span style=\\"color:#569CD6\\"> -D</span><span style=\\"color:#CE9178\\"> husky</span><span style=\\"color:#CE9178\\"> @commitlint/config-conventional</span><span style=\\"color:#6A9955\\"> # 원하는 패키지 설치</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 미리 작성해뒀거나, 다른 리포에서 성공적으로 동작하는 config 파일을 작업하는 리포에 복사합니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">cp</span><span style=\\"color:#CE9178\\"> path/to/config/commitlint.config.js</span><span style=\\"color:#CE9178\\"> ./commitlint.config.js</span></span></code></pre>\\n</div><ul>\\n<li><a href=\\"https://cli.github.com/\\" target=\\"_blank\\" rel=\\"noreferrer\\">gh</a></li>\\n</ul>\\n<div class=\\"language-bash\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">bash</span><pre class=\\"shiki dark-plus\\" style=\\"background-color:#1E1E1E;color:#D4D4D4\\" tabindex=\\"0\\" dir=\\"ltr\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"color:#6A9955\\"># 작업한 파일을 커밋해줍니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">git</span><span style=\\"color:#CE9178\\"> add</span><span style=\\"color:#CE9178\\"> package.json</span><span style=\\"color:#CE9178\\"> yarn.lock</span><span style=\\"color:#CE9178\\"> commitlint.config.js</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">git</span><span style=\\"color:#CE9178\\"> commit</span><span style=\\"color:#569CD6\\"> -m</span><span style=\\"color:#CE9178\\"> \\"chore: add husky and basic commitlint to enforce commit policy\\"</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 해당 커밋에 대한 PR을 작성합니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">gh</span><span style=\\"color:#CE9178\\"> pr</span><span style=\\"color:#CE9178\\"> create</span><span style=\\"color:#D7BA7D\\"> \\\\ </span><span style=\\"color:#CE9178\\">#</span><span style=\\"color:#CE9178\\"> 참조:</span><span style=\\"color:#CE9178\\"> https://cli.github.com/manual/gh_pr_create</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">  -a</span><span style=\\"color:#CE9178\\"> @me</span><span style=\\"color:#D7BA7D\\"> \\\\</span></span>\\n<span class=\\"line\\"><span style=\\"color:#569CD6\\">  -r</span><span style=\\"color:#CE9178\\"> {리뷰어</span><span style=\\"color:#CE9178\\"> ID}</span><span style=\\"color:#D7BA7D\\"> \\\\</span></span>\\n<span class=\\"line\\"><span style=\\"color:#569CD6\\">  -t</span><span style=\\"color:#CE9178\\"> \\"chore: pr에 어울리는 타이틀\\"</span><span style=\\"color:#D7BA7D\\"> \\\\</span></span>\\n<span class=\\"line\\"><span style=\\"color:#569CD6\\">  -b</span><span style=\\"color:#CE9178\\"> \\"Refer to {wiki document link} for detail explanation\\"</span><span style=\\"color:#6A9955\\"> # 미리 작성해둔 pr 본문이 있다면, -F 플래그를 이용할 수도 있습니다.</span></span></code></pre>\\n</div></li>\\n</ol>\\n<p>각 파트를 주석처리해가며, 의도했던 변화가 일어났는지 확인하며 작업하는 것을 추천합니다.</p>\\n<h2 id=\\"마치며\\" tabindex=\\"-1\\">마치며 <a class=\\"header-anchor\\" href=\\"#마치며\\" aria-label=\\"Permalink to “마치며”\\">&#8203;</a></h2>\\n<p>무엇보다, 터미널에서 명령어들의 연계로 문제를 해결하는 것은 재밌습니다.\\n새로운 조합을 찾고 그 강력함에 감탄을 느낄 때,\\n마치 철권과 같은 액션 대전 게임에서 새로운 연속기를 찾아낸 것 같은 기분이 듭니다.\\n개발 인생 내내 계속 마주칠 터미널이라면,\\n조금의 시간을 들여 자신만의 연속기 레파토리를 만들어 나가시는 건 어떤가요?</p>\\n","date":{"time":1676723082978,"string":"February 18, 2023"}},{"title":"FE 개발자와 터미널 - 01","url":"/posts/terminal-for-fe/01.html","excerpt":"","date":{"time":1676206770052,"string":"February 12, 2023"}},{"title":"웹개발 TDD 입문, Jest의 Matchers 정리","url":"/posts/jest-intro/","excerpt":"<p>\\n      <figure>\\n        <img src=\\"./uncle-bob-tdd.png\\" alt=\\"대청소는 어렵다. <br/> 작은 정리를 계속해야 깨끗한 코드베이스를 유지할 수 있다.\\" />\\n        <figcaption>대청소는 어렵다. <br/> 작은 정리를 계속해야 깨끗한 코드베이스를 유지할 수 있다.</figcaption>\\n      </figure>\\n    </p>\\n<p>Test-driven Development(TDD)를 항상 하고 싶었다.\\nClean Code 강의를 듣기 시작하면서, 이 생각이 더 커졌다.\\n책의 저자이자 강의자인 Uncle Bob이 TDD를 무척이나 강조하기도 하고,\\nTDD의 장점을 논리적이고 매력적으로 설명해주었기 때문이다.\\n그 중 무엇보다 마음에 들었던 것은 '좋은 테스트가 있으면,\\n리팩토링에 두려움이 없어진다'는 것이다.</p>\\n<p>더 나은 엔지니어가 되기 위해 TDD(Test-driven Development)를 실천해보고자 한다.\\nJavascript 진영에서는 어떤 테스팅 툴이 있는지,\\n특히 내가 사용하는 Vue.js에서는 어떤 툴이 널리 쓰이는지 조사했다.\\n영상과 도큐먼트들을 살펴보며 유닛 테스트를 먼저 해보기로 하고 Jest를 선택했다.</p>\\n<p><a href=\\"https://vuejs.org/v2/guide/testing.html\\" target=\\"_blank\\" rel=\\"noreferrer\\">Vue.js의 테스팅 가이드</a>와\\n<a href=\\"https://jestjs.io/docs/en/using-matchers\\" target=\\"_blank\\" rel=\\"noreferrer\\">Jest의 공식 도큐먼트</a>를 크게 참조하며\\n다음을 가볍게 정리해보았다:</p>\\n<ul>\\n<li>웹개발에서 사용되는 테스트의 종류</li>\\n<li>Jest의 시작인 Matchers의 종류</li>\\n</ul>\\n<h2 id=\\"웹개발에서-사용되는-테스트의-종류\\" tabindex=\\"-1\\">웹개발에서 사용되는 테스트의 종류 <a class=\\"header-anchor\\" href=\\"#웹개발에서-사용되는-테스트의-종류\\" aria-label=\\"Permalink to “웹개발에서 사용되는 테스트의 종류”\\">&#8203;</a></h2>\\n<p>웹개발에 있어서는 크게 세 가지의 테스트가 있다.</p>\\n<table tabindex=\\"0\\">\\n<thead>\\n<tr>\\n<th>종류</th>\\n<th>역할</th>\\n<th>라이브러리/솔루션</th>\\n</tr>\\n</thead>\\n</table>\\n","date":{"time":1611404824223,"string":"January 23, 2021"}},{"title":"책 소개; 일상적인 것들의 디자인","url":"/posts/fundamental-principles-of-interaction/","excerpt":"","date":{"time":1610196013847,"string":"January 9, 2021"}},{"title":"Vagrant와 Ansible로 하는 서버 관리 기초","url":"/posts/vagrant_and_ansible/","excerpt":"<p>공용 서버를 관리하게 된 초보 인프라 관리자와 <em>서버 세팅 자동화</em>에 관심이 있는 개발자/연구자의 시름을 덜기 위해 (무엇보다 글쓴이가 나중에 참고하기 위해) 시행착오하며 공부한 내용을 정리해두고자 한다. 이 글에선 <strong>Vagrant</strong>와 <strong>Ansible</strong>을 이용해 <strong>눈송이 서버</strong>를 <strong>불사조 서버</strong>로 전환하는 데 활용할 수 있는 워크플로우와 이 과정을 이해하는데 필요한 기본적인 개념들을 정리한다.</p>\\n<h2 id=\\"배경-설명\\" tabindex=\\"-1\\">배경 설명 <a class=\\"header-anchor\\" href=\\"#배경-설명\\" aria-label=\\"Permalink to “배경 설명”\\">&#8203;</a></h2>\\n<p>독자에게 자동화의 필요성이 좀 더 잘 와닿았으면 하는 바람으로, 직접 겪은 문제들을 먼저 공유해보고자 한다. 글쓴이는 운이 좋게도(?) 인턴으로 있는 랩에서 공용으로 사용하는 서버 컴퓨터들을 관리하게 되었다. 각 연구원이 개인용으로 사용하고 있던 머신들을 모아서 공용 클러스터를 구축하는 임무를 맡았는데, 컴퓨터 대수가 많지 않고 자동화 툴들에 익숙치가 않다는 이유로, 각 머신을 직접 세팅하고 서버실에 올리겠다는 어리석은 판단을 하고 말았다. 그러니 다음과 같은 상황이 벌어지고 말았다...</p>\\n<blockquote>\\n<p><em>연구원: &quot;서버에서 도커 쓸 수 있나요?&quot; <br>\\n글쓴이: &quot;네, 서버 한 대 한 대에 직접 다 설치해서 확인했습니다!&quot; <br>\\n연구원: &quot;오, GPU도 사용할 수 있나요?&quot; <br>\\n글쓴이: &quot;네, 이번에 전부 세팅해놓았습니다!&quot; <br>\\n연구원: &quot;근데 5번 노드에선 도커 --gpus 옵션이 작동 안하는데요?&quot; <br>\\n글쓴이: &quot;네...?&quot;</em></p>\\n</blockquote>\\n<p>이런 상황 외에도, 각 노드에 각 연구원을 위한 유저 아이디를 만들고 관리하는 작업과 Docker의 기본 브릿지 아이피 대역을 바꾸는 것, 공통으로 필요한 툴 설치 등 사소할 수 있는 업무가 계속 생성되는데, 서버를 일일이 돌며 작업을 하는 것은 결코 사소하지 않았고 인수인계도 힘들었다. 결국 자동화의 길로 들어서게 됐다.</p>\\n<p>기본적인 용어부터 정리해보자.</p>\\n<h2 id=\\"기본-개념-정리\\" tabindex=\\"-1\\">기본 개념 정리 <a class=\\"header-anchor\\" href=\\"#기본-개념-정리\\" aria-label=\\"Permalink to “기본 개념 정리”\\">&#8203;</a></h2>\\n<ul>\\n<li>\\n<p><strong>버츄얼박스 VirtualBox</strong> <br>\\n버츄얼박스는 호스트 OS위에 애플리케이션으로서 돌아가는 type 2 하이퍼바이저(hypervisor)이고, 오라클에서 관리하는 범용 x86 하드웨어 풀 버츄얼라이저이다.[^about_virtualbox]  가상 머신을 이용할 수 있게 해주는 소프트웨어로 이해하면 된다.</p>\\n</li>\\n<li>\\n<p><strong>베이그란트 Vagrant</strong> <br>\\nVM들을 쉽게 관리하게 도와주는 커맨드라인 툴이다. 워크플로우를 개선하고 자동화에 집중할 수 있게 해주면서, &quot;내 컴퓨터에선 됐는데...&quot;라는 별명을 과거의 유물로 만든다는 게 공식 문서의 설명.[^intro_to_vagrant] 이 글에서는 기초적인 커맨드만 사용한다.</p>\\n</li>\\n<li>\\n<p><strong>앤서블 Ansible</strong> <br>\\n앤서블은 놀랍도록 간편한 IT 자동화 엔진이다.[^how_ansible_works] ssh로 연결할 수 있고 파이썬이 설치된 머신이라면 앤서블로 관리할 수 있다. 대부분이 파이썬으로 작성됐지만 파이썬을 몰라도, YAML만 이해한다면 바로 사용할 수 있다. 비슷한 일을 하는 툴들로는 <strong>Puppet</strong>, <strong>Chef</strong> 등이 있지만, 그 중에 앤서블만이 CNCF(Cloud Native Computing Foundation)의 플래티넘 멤버이다...! 앤서블은 레드햇에 인수되어 관리되고 있다.[^cncf_ansible]</p>\\n</li>\\n<li>\\n<p><strong>눈송이 서버 Snowflake Server</strong>[^snowflake_server] <br>\\n위의 배경에서 내가 구성한 서버가 바로 눈송이 서버이다. 세상에 하나밖에 없고, 없어지면 다시 똑같이 재현해 내기가 거의 불가능하다는 뜻에서 눈송이 서버라 불린다. 주로 수동으로 이것저것 설치하고 환경설정도 바꾸면서 만들어진다. 인프라 관리자로서 가장 경계해야 하는 게 눈송이 서버를 만드는 게 아닐까싶다. 눈송이가 녹으면, 후임은 다시 처음부터 새로 세팅을 해야 한다.</p>\\n</li>\\n<li>\\n<p><strong>불사조 서버 Pheonix Server</strong>[^pheonix_server] <br>\\n넷플릭스에서는 <em>카오스 몽키</em>라는 툴을 만들어 임의적으로 서버를 (비유적으로) 불태우는 것을 아는가? 커다란 시스템이 서버가 망가지는 사건/사고/재해에 견딜 수 있는지를 확인하기 위함이라고 한다. 눈송이 서버가 시스템을 주로 이룬다면 상상도 할 수 없는 테스트이다. 눈송이의 반대는 뭘까? 불타 죽어도, 그 잿더미로부터 다시 태어나는, 불사조다! 그 구성이 문서화/자동화 되어있어 언제든 똑같은 서버를 만들 수 있는 서버를 불사조 서버라고 부른다.</p>\\n<p>불사조 서버의 용례를 좀 더 자세히 알고 싶다면 <a href=\\"https://bcho.tistory.com/1224\\" target=\\"_blank\\" rel=\\"noreferrer\\">조대협님의 글</a>[^bcho_manse]을 추천한다.</p>\\n</li>\\n<li>\\n<p><strong>IaC (Infrastructure as Code)</strong> <br>\\n코드로서의 인프라. 머신에 접속해 커맨드라인 인터페이스에서 명령어를 하나씩 입력해 환경을 관리하는 게 아니라, 스크립트 파일이나 추구하는 환경의 상태가 정리되어 있는 YAML 파일 등으로 관리하는 방법론을 일컫는다. 후에 어떻게 환경이 설정되어 있는지 코드를 보고 쉽게 알 수 있고, 코드이다보니 무려 버전 관리도 할 수 있다! <a href=\\"https://en.wikipedia.org/wiki/Infrastructure_as_code\\" target=\\"_blank\\" rel=\\"noreferrer\\">위키피디아</a>에 관련 정보가 매우 정리가 잘돼있어 더 자세히 알고 싶다면 일독을 권한다.</p>\\n</li>\\n</ul>\\n<h2 id=\\"목표\\" tabindex=\\"-1\\">목표 <a class=\\"header-anchor\\" href=\\"#목표\\" aria-label=\\"Permalink to “목표”\\">&#8203;</a></h2>\\n<p>이 글은 이제까지 한 모든 자동화 작업을 정리하는 게 아니라, 기본적인 워크플로우를 소개하는데 집중한다.</p>\\n<ul>\\n<li>\\n<p><strong>실제 머신에 Ansible Playbook을 적용하기 전에 가상 머신에서 충분히 실험해 볼 수 있다.</strong> <br>\\n앤서블에서는 원하는 머신의 상태를 서술한 파일을 <strong>플레이북 Playbook</strong>이라고 부른다. Vagrant를 이용해 간편하게 VM을 만들어 실험해 본 후에 적용하자.</p>\\n</li>\\n<li>\\n<p><strong>머신에서 Docker를 사용할 수 있게 한다.</strong> <br>\\n공용서버에선 아무나 sudoer여서는 안된다. 각자가 원하는 버전의 툴을 설치하다보면, 네임스페이스를 어지럽혀 다른 사람의 연구/개발을 방해할 수 있기 떄문이다. Ansible을 이용해 도커 런타임을 설치해보자.</p>\\n</li>\\n</ul>\\n<h2 id=\\"워크플로우\\" tabindex=\\"-1\\">워크플로우 <a class=\\"header-anchor\\" href=\\"#워크플로우\\" aria-label=\\"Permalink to “워크플로우”\\">&#8203;</a></h2>\\n<p>사용하는 워크플로우는 단순하다. Vagrant를 이용해 가상 머신을 로컬 환경에서 만들고 시행착오하며 앤서블 플레이북을을 만들어 낸 후에, 새로운 가상 머신 인스턴스를 생성해서 작성한 플레이북이 원하는대로 환경을 만들어내는지 확인하고 나서, 실제 머신에 플레이북을 적용하면 된다.</p>\\n<p>이를 단계를 나누어 설명해보았다.</p>\\n<h3 id=\\"_0-필요-툴-설치\\" tabindex=\\"-1\\">0. 필요 툴 설치 <a class=\\"header-anchor\\" href=\\"#_0-필요-툴-설치\\" aria-label=\\"Permalink to “0. 필요 툴 설치”\\">&#8203;</a></h3>\\n<p>이 튜토리얼을 따라하려면, 다음의 툴들을 설치해야 한다. 클릭하면 설치법이 있는 공식문서가 열릴 것이다. 각 툴의 사용법은 아래 코드의 주석으로 짧게 설명한다. 이 글은 리눅스 환경을 가정하고 작성됐다.</p>\\n<ul>\\n<li><a href=\\"https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html\\" target=\\"_blank\\" rel=\\"noreferrer\\">Ansible</a></li>\\n<li><a href=\\"https://www.virtualbox.org/wiki/Downloads\\" target=\\"_blank\\" rel=\\"noreferrer\\">VirtualBox</a></li>\\n<li><a href=\\"https://www.vagrantup.com/intro/getting-started/install.html\\" target=\\"_blank\\" rel=\\"noreferrer\\">Vagrant</a></li>\\n</ul>\\n<h3 id=\\"_1-샌드박스-생성\\" tabindex=\\"-1\\">1. 샌드박스 생성 <a class=\\"header-anchor\\" href=\\"#_1-샌드박스-생성\\" aria-label=\\"Permalink to “1. 샌드박스 생성”\\">&#8203;</a></h3>\\n<div class=\\"language-bash\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">bash</span><pre class=\\"shiki dark-plus\\" style=\\"background-color:#1E1E1E;color:#D4D4D4\\" tabindex=\\"0\\" dir=\\"ltr\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"color:#6A9955\\"># 실제 머신에 설치할 OS를 가진 VM 이미지를 받아온다.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 여기선 우분투 18.04 버전 이미지를 이용했다. </span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">vagrant</span><span style=\\"color:#CE9178\\"> init</span><span style=\\"color:#CE9178\\"> geerlingguy/ubuntu1804</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 위의 명령어의 결과로 Vagrantfile이 만들어졌을 것이다.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 이 파일에 적힌 정보를 이용해 다음의 명령어가 인터넷에서</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># vm 이미지를 다운로드하고 </span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 설치된 하이퍼바이저를 이용해 인스턴스를 생성할 것이다. </span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">vagrant</span><span style=\\"color:#CE9178\\"> up</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 인스턴스를 멈추려면 </span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># vagrant down</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 인스턴스를 없애려면</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># vagrant destroy</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 하면 된다. 정말 간편하지 않은가!</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 다음 명령어를 이용하면 vagrant라는 유저로 </span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 방금 생성한 vm 인스턴스에 ssh 접속이 된다. </span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 아직 docker가 없다는 것을 확인하고 </span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># exit를 치거나 Ctrl+d 를 눌러 나오면 된다. </span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">vagrant</span><span style=\\"color:#CE9178\\"> ssh</span></span></code></pre>\\n</div><h3 id=\\"_2-vagrantfile-편집-optional\\" tabindex=\\"-1\\">2. Vagrantfile 편집 (optional) <a class=\\"header-anchor\\" href=\\"#_2-vagrantfile-편집-optional\\" aria-label=\\"Permalink to “2. Vagrantfile 편집 (optional)”\\">&#8203;</a></h3>\\n<p>Vagrantfile을 아래와 같이 바꾸면 <code>vagrant provision</code>이라는 명령어로 같은 디렉토리에 있는 <code>playbook.yml</code> 플레이북을 적용할 수 있게 된다. 이렇게 하지 않고 따로 <a href=\\"https://docs.ansible.com/ansible/2.3/intro_inventory.html\\" target=\\"_blank\\" rel=\\"noreferrer\\">앤서블 인벤토리</a>를 만들고 <code>ansible</code> 커맨드를 이용해도 된다. 다만, 이렇게 할 수 있는 독자는 이 이후로는 읽을 필요가 없다.</p>\\n<div class=\\"language-ruby\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">ruby</span><pre class=\\"shiki dark-plus\\" style=\\"background-color:#1E1E1E;color:#D4D4D4\\" tabindex=\\"0\\" dir=\\"ltr\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"color:#6A9955\\"># -*- mode: ruby -*-</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># vi: set ft=ruby :</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#4EC9B0\\">Vagrant</span><span style=\\"color:#D4D4D4\\">.</span><span style=\\"color:#DCDCAA\\">configure</span><span style=\\"color:#D4D4D4\\">(</span><span style=\\"color:#CE9178\\">\\"2\\"</span><span style=\\"color:#D4D4D4\\">) </span><span style=\\"color:#C586C0\\">do</span><span style=\\"color:#D4D4D4\\"> |</span><span style=\\"color:#9CDCFE\\">config</span><span style=\\"color:#D4D4D4\\">|</span></span>\\n<span class=\\"line\\"><span style=\\"color:#D4D4D4\\">  config.</span><span style=\\"color:#DCDCAA\\">vm</span><span style=\\"color:#D4D4D4\\">.</span><span style=\\"color:#DCDCAA\\">box</span><span style=\\"color:#D4D4D4\\"> = </span><span style=\\"color:#CE9178\\">\\"geerlingguy/centos7\\"</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#D4D4D4\\">  config.</span><span style=\\"color:#DCDCAA\\">vm</span><span style=\\"color:#D4D4D4\\">.</span><span style=\\"color:#DCDCAA\\">provision</span><span style=\\"color:#CE9178\\"> \\"ansible\\"</span><span style=\\"color:#C586C0\\"> do</span><span style=\\"color:#D4D4D4\\"> |</span><span style=\\"color:#9CDCFE\\">ansible</span><span style=\\"color:#D4D4D4\\">|</span></span>\\n<span class=\\"line\\"><span style=\\"color:#D4D4D4\\">    ansible.</span><span style=\\"color:#DCDCAA\\">playbook</span><span style=\\"color:#D4D4D4\\"> = </span><span style=\\"color:#CE9178\\">\\"playbook.yml\\"</span></span>\\n<span class=\\"line\\"><span style=\\"color:#C586C0\\">  end</span></span>\\n<span class=\\"line\\"><span style=\\"color:#C586C0\\">end</span></span></code></pre>\\n</div><h3 id=\\"_3-앤서블-플레이북-작성\\" tabindex=\\"-1\\">3. 앤서블 플레이북 작성 <a class=\\"header-anchor\\" href=\\"#_3-앤서블-플레이북-작성\\" aria-label=\\"Permalink to “3. 앤서블 플레이북 작성”\\">&#8203;</a></h3>\\n<p>앤서블을 이용하려면 <strong>인벤토리Inventory</strong>와 <strong>플레이북Playbook</strong> 개념을 알아야 한다. 2번 단계처럼 Vagrantfile을 편집했다면, 인벤토리를 직접 작성하지 않고 플레이북만 작성해 실험할 수 있지만 후에 실제 머신을 관리하기 위해선 인벤토리 파일을 작성해야 하니 어떻게 작성하는지 알고 있어야 한다.</p>\\n<h4 id=\\"인벤토리-작성법\\" tabindex=\\"-1\\">인벤토리 작성법 <a class=\\"header-anchor\\" href=\\"#인벤토리-작성법\\" aria-label=\\"Permalink to “인벤토리 작성법”\\">&#8203;</a></h4>\\n<p>인벤토리는 YAML 형식으로도 작성할 수 있지만, 보통 INI 파일의 형식을 따르고, 노드들을 그룹으로 묶어 관리할 수 있는 기능을 제공한다. 이 글에선 따로 작성하지 않으니, 기본 템플릿만 소개한다.</p>\\n<div class=\\"language-ini\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">ini</span><pre class=\\"shiki dark-plus\\" style=\\"background-color:#1E1E1E;color:#D4D4D4\\" tabindex=\\"0\\" dir=\\"ltr\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"color:#6A9955\\"># 노드를 묶을 그룹 이름</span></span>\\n<span class=\\"line\\"><span style=\\"color:#D4D4D4\\">[그룹 이름] </span></span>\\n<span class=\\"line\\"><span style=\\"color:#D4D4D4\\">192.168.x.x </span><span style=\\"color:#6A9955\\"># 관리할 노드의 호스트명 또는 아이피 주소</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 그룹에 대해 사용할 변수 목록 </span></span>\\n<span class=\\"line\\"><span style=\\"color:#D4D4D4\\">[그룹 이름:vars]</span></span>\\n<span class=\\"line\\"><span style=\\"color:#569CD6\\">ansible_user</span><span style=\\"color:#D4D4D4\\">=vagrant</span></span></code></pre>\\n</div><h4 id=\\"플레이북-작성법\\" tabindex=\\"-1\\">플레이북 작성법 <a class=\\"header-anchor\\" href=\\"#플레이북-작성법\\" aria-label=\\"Permalink to “플레이북 작성법”\\">&#8203;</a></h4>\\n<p>플레이북은 크게 두 부분으로 나뉜다.</p>\\n<ol>\\n<li>\\n<p><strong>어떤 노드들에 어떤 유저로 작업할지 명시하는 부분</strong> <br>\\n플레이북에서 사용할 변수들도 여기에 선언한다.</p>\\n</li>\\n<li>\\n<p><strong>작업 목록</strong> <br>\\n앤서블에서 작업은 테스크라는 단위로 나누어 관리한다. 테스크는 이름, 사용할 모듈, 모듈에 넣을 인수 목록을 포함한다. 어떤 작업인지 이름을 넣어서 어떤 작업인지 알 수 있게 하자.</p>\\n</li>\\n</ol>\\n<h4 id=\\"앤서블의-모듈\\" tabindex=\\"-1\\">앤서블의 모듈 <a class=\\"header-anchor\\" href=\\"#앤서블의-모듈\\" aria-label=\\"Permalink to “앤서블의 모듈”\\">&#8203;</a></h4>\\n<p>앤서블에선 작업을 실행할 때 사용하는 스크립트를 모듈이라 부른다. <code>ping</code> 모듈을 사용하면, 관리하는 노드들이 살아 있고 네트워크 연결이 되어 있는지 쉽게 확인할 수 있고, <code>command</code> 모듈을 사용하면 원격으로 커맨드라인 툴을 사용할 수 있다. 각종 패키지 매니저 모듈도 있는데, 여기선 우분투 머신을 세팅하니 <code>apt</code> 모듈을 사용할 것이다.</p>\\n<p>앤서블을 설치하면 아주 다양한 모듈이 딸려 오는데, 개중에 특히 도움이 되는 모듈들이 있다. 더 자세히 알고 싶다면 <a href=\\"https://opensource.com/article/19/9/must-know-ansible-modules\\" target=\\"_blank\\" rel=\\"noreferrer\\">알아두면 좋은 10가지 모듈</a>을 읽어보자.</p>\\n<h4 id=\\"예시\\" tabindex=\\"-1\\">예시 <a class=\\"header-anchor\\" href=\\"#예시\\" aria-label=\\"Permalink to “예시”\\">&#8203;</a></h4>\\n<p>아래 플레이북 예시는 도커 런타임을 설치한다. <a href=\\"https://www.digitalocean.com/community/tutorials/how-to-use-ansible-to-install-and-set-up-docker-on-ubuntu-18-04\\" target=\\"_blank\\" rel=\\"noreferrer\\">디지털오션의 튜토리얼</a>과 <a href=\\"https://docs.docker.com/engine/install/ubuntu/\\" target=\\"_blank\\" rel=\\"noreferrer\\">도커 공식 설치 가이드</a>를 참조해 작성했다.</p>\\n<div class=\\"language-yaml\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">yaml</span><pre class=\\"shiki dark-plus\\" style=\\"background-color:#1E1E1E;color:#D4D4D4\\" tabindex=\\"0\\" dir=\\"ltr\\" v-pre=\\"\\"><code><span class=\\"line\\"></span></code></pre>\\n</div>","date":{"time":1590408760000,"string":"May 25, 2020"}},{"title":"컨테이너에서 돌아가는 애플리케이션의 GUI를 이용하는 법","url":"/posts/gui-on-container/","excerpt":"<p>도커 컨테이너에서 실행된 애플리케이션의 화면을 내 모니터에서 볼 수 있을까? 가능하다! 어떤 사람들은 IDE, 웹브라우저, 심지어 윈도우 매니저까지 컨테이너에서 실행하기도 한다.</p>\\n<p>흔히 알려진 ssh의 X11 포워딩과 vnc로도 컨테이너 내 애플리케이션의 화면을 볼 수 있지만, 두 방법 모두 좋은 속도를 내진 않는다. ssh는 디스플레이 정보를 암호화해서 전송하고 vnc는 컨테이너에서 렌더링을 한 후에 화면을 전송하기 때문에 일상적으로 사용할 만한 GUI 경험을 제공하지 못한다.</p>\\n<p>하지만, 더 간단하고 쾌적하게 컨테이너 속 애플리케이션을 활용할 수도 있다. <strong>윈도우 시스템</strong>과 <strong>디스플레이 서버</strong>를 이해하고 이용해서, 로컬에서 돌아가는 것과 비슷한 속도로 컨테이너화한 프로그램의 GUI를 이용해 보자!</p>\\n<h2 id=\\"이론\\" tabindex=\\"-1\\">이론 <a class=\\"header-anchor\\" href=\\"#이론\\" aria-label=\\"Permalink to “이론”\\">&#8203;</a></h2>\\n<p>리눅스 환경에서 가장 쉽게 볼 수 있는 X.Org 디스플레이 서버와 X11 윈도우 시스템을 기준으로 설명을 진행한다. 바로 실습으로 넘어가서 기작을 이해할 수 있다면 읽지 않아도 좋다.</p>\\n<h3 id=\\"설명하는-용어\\" tabindex=\\"-1\\">설명하는 용어 <a class=\\"header-anchor\\" href=\\"#설명하는-용어\\" aria-label=\\"Permalink to “설명하는 용어”\\">&#8203;</a></h3>\\n<ul>\\n<li>디스플레이 서버 (Display Server)</li>\\n<li>윈도윙 시스템 (Windowing System / Window System)</li>\\n</ul>\\n<h3 id=\\"디스플레이-서버란\\" tabindex=\\"-1\\">디스플레이 서버란? <a class=\\"header-anchor\\" href=\\"#디스플레이-서버란\\" aria-label=\\"Permalink to “디스플레이 서버란?”\\">&#8203;</a></h3>\\n<p>\\n      <figure>\\n        <img src=\\"https://i.imgur.com/tZhNrGP.png\\" alt=\\"GUI의 기본 구성 (출처: 위키피디아)\\" />\\n        <figcaption>GUI의 기본 구성 (출처: 위키피디아)</figcaption>\\n      </figure>\\n    </p>\\n<p>입출력 장치들 (마우스, 키보드, 모니터) 등은 모두 하드웨어다. 리눅스에서 하드웨어를 직접 제어하는 것은 리눅스 커널 뿐이다. 그렇다고 입출력을 알맞게 처리하기 위해서 모든 응용프로그램이 커널 API를 직접 소비한다면, 매우 비효율적일 것이다. '디스플레이 서버(윈도우 서버)'라는 개념은 이런 난점을 해결해준다.</p>\\n<p>디스플레이 서버는 커널과 직접 소통하며 애플리케이션과 운영체제 사이에 입출력 정보 통신을 원활히 하는 프로그램이다. 여타 애플리케이션은 클라이언트로서 하드웨어 입출력 신호를 대신 처리해주는 서비스를 디스플레이 서버로부터 받는다.</p>\\n<p>디스플레이 서버도 일종의 서버로, 클라이언트들과 통신 프로토콜을 이용해 정보를 주고 받는다. 이 프로토콜은 네트워크-투명(network transparent)할 수도 있고, 그저 네트워크-가능(network possible)일 수도 있다.</p>\\n<p>윈도우 안에 GUI를 제공하는 모든 애플리케이션은 디스플레이 서버의 클라이언트인 셈이다. 디스플레이 서버는 WIMP(Windows, Icons, Menus, Pointer) GUI를 지원하는 <strong>윈도윙 시스템</strong>의 핵심 부품이다.</p>\\n<h3 id=\\"x-window-system-x11-x-에-대하여\\" tabindex=\\"-1\\">X Window System (X11, X)에 대하여 <a class=\\"header-anchor\\" href=\\"#x-window-system-x11-x-에-대하여\\" aria-label=\\"Permalink to “X Window System (X11, X)에 대하여”\\">&#8203;</a></h3>\\n<p>X11는 프로토콜의 집합일 뿐이다. X11 시스템을 갖는다는 것은 이 프로토콜을 준수하는 소프트웨어의 집합을 유지한다는 의미이다. 보통 X11 시스템인 윈도윙 시스템을 X11 또는 X라 한다.</p>\\n<p>X는 유닉스 계열 운영체제에서 쉽게 볼 수 있는 비트맵 디스플레이를 위한 윈도윙 시스템이다. 디스플레이 장치에 윈도우를 만들고 움직이거나, 마우스나 키보드와 같은 입력장치와의 기본적인 상호작용을 지원하는 <em>프레임워크</em>이다. X는 1984년에 MIT에서 시작되었으며, <a href=\\"https://www.x.org/wiki/\\" target=\\"_blank\\" rel=\\"noreferrer\\">X.Org</a>에서 오픈소스 구현을 제공하며 프로젝트를 이끌고 있다.</p>\\n<p>X는 네트워크 투명성을 지원한다는 점에서 특별하다. 네트워크 상에 있는 다른 컴퓨터에서 돌아가는 프로그램의 화면도 볼 수 있게 해준다. 그렇기 때문에 우리가 도커 컨테이너에서 돌아가는 프로그램의 화면을 볼 수 있다.</p>\\n<h3 id=\\"서버-클라이언트\\" tabindex=\\"-1\\">서버-클라이언트 <a class=\\"header-anchor\\" href=\\"#서버-클라이언트\\" aria-label=\\"Permalink to “서버-클라이언트”\\">&#8203;</a></h3>\\n<p>\\n      <figure>\\n        <img src=\\"https://i.imgur.com/uVvgOvD.png\\" alt=\\"X 시스템 구성도 (이미지 출처: 위키피디아)\\" />\\n        <figcaption>X 시스템 구성도 (이미지 출처: 위키피디아)</figcaption>\\n      </figure>\\n    </p>\\n<p>실제 사용자 앞에 있는 컴퓨터에서 꼭 돌아가야 하는 건 결국 디스플레이 서버다. 다분히 애플리케이션의 관점에서 이루어 용어 선택이라, 처음엔 헷갈릴 수 있다. 애플리케이션이 로컬에서 돌아가든, 네트워크 어딘가에서 돌아가든, 애플리케이션은 디스플레이 서버의 클라이언트이다. 위에서 말했듯, 입출력 자원을 커널을 통해 관리하는 서비스를 디스플레이 서버가 담당하며 클라이언트를 대신 해 사용자의 마우스 클릭을 받고, 커널에 그래픽 렌더링을 요청한다.</p>\\n<p>ssh의 X포워딩 기능을 이용하는 것도 같은 원리다. 다만 윈도우즈 운영체제에서는 X포워딩 기능을 이용하기 위해선 Xming을 설치해야 하는데, 그건 기본 윈도우즈에 X서버가 없어서, X 서버의 윈도우용으로 포팅된 버전을 설치하는 것이다. Xming은 '윈도우즈를 위한 X 서버'이다.</p>\\n<p>우리는 도커 컨테이너 내에서 돌아가는 X 클라이언트인 프로그램이 호스트에서 실행되고 있는 X 디스플레이 서버에 접속할 수 있게 해주면 되는 것이다.</p>\\n<h2 id=\\"실습\\" tabindex=\\"-1\\">실습 <a class=\\"header-anchor\\" href=\\"#실습\\" aria-label=\\"Permalink to “실습”\\">&#8203;</a></h2>\\n<p>결국 우리가 해야 하는 일은,</p>\\n<ol>\\n<li>\\n<p>컨테이너를 실행할 때</p>\\n<ul>\\n<li>디스플레이 소켓을 마운트하고</li>\\n<li>컨테이너 내에 디스플레이 환경 변수를 보내주고</li>\\n</ul>\\n</li>\\n<li>\\n<p>컨테이너 실행 후에</p>\\n<ul>\\n<li><code>xhost</code> 명령어를 이용해 컨테이너 내 애플리케이션이 호스트의 디스플레이 서버에 접속할 수 있게 허가 해준다</li>\\n</ul>\\n</li>\\n<li>\\n<p>컨테이너 정지 후에</p>\\n<ul>\\n<li><code>xhost</code> 명령어를 이용해 종료한 컨테이너를 X 서버 접속 허가 리스트에서 지운다</li>\\n</ul>\\n</li>\\n</ol>\\n<div class=\\"language-bash\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">bash</span><pre class=\\"shiki dark-plus\\" style=\\"background-color:#1E1E1E;color:#D4D4D4\\" tabindex=\\"0\\" dir=\\"ltr\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"color:#DCDCAA\\">docker</span><span style=\\"color:#CE9178\\"> container</span><span style=\\"color:#CE9178\\"> run</span><span style=\\"color:#D7BA7D\\"> \\\\ </span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">    -v</span><span style=\\"color:#CE9178\\"> /tmp/.X11-unix/:/tmp/.X11-unix</span><span style=\\"color:#D7BA7D\\"> \\\\ </span><span style=\\"color:#CE9178\\">#</span><span style=\\"color:#CE9178\\"> 소켓</span><span style=\\"color:#CE9178\\"> 마운팅</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">    -e</span><span style=\\"color:#CE9178\\"> \\"DISPLAY\\"</span><span style=\\"color:#D7BA7D\\"> \\\\ </span><span style=\\"color:#CE9178\\">#</span><span style=\\"color:#CE9178\\"> 환경</span><span style=\\"color:#CE9178\\"> 변수</span><span style=\\"color:#CE9178\\"> 전달</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">    --name</span><span style=\\"color:#CE9178\\"> container_name</span><span style=\\"color:#D7BA7D\\"> \\\\</span></span>\\n<span class=\\"line\\"><span style=\\"color:#CE9178\\">    image_name</span></span>\\n<span class=\\"line\\"><span style=\\"color:#D4D4D4\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"color:#D4D4D4\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">xhost</span><span style=\\"color:#CE9178\\"> +local:\`</span><span style=\\"color:#DCDCAA\\">docker</span><span style=\\"color:#CE9178\\"> container ls </span><span style=\\"color:#569CD6\\">-f</span><span style=\\"color:#CE9178\\"> name=container_name </span><span style=\\"color:#569CD6\\">-q</span><span style=\\"color:#CE9178\\">\`</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 또는 xhost +local:host</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 컨테이너 종료 후에</span></span>\\n<span class=\\"line\\"><span style=\\"color:#DCDCAA\\">xhost</span><span style=\\"color:#569CD6\\"> -local:</span><span style=\\"color:#CE9178\\">\`</span><span style=\\"color:#DCDCAA\\">docker</span><span style=\\"color:#CE9178\\"> container ls </span><span style=\\"color:#569CD6\\">-f</span><span style=\\"color:#CE9178\\"> name=container_name </span><span style=\\"color:#569CD6\\">-q</span><span style=\\"color:#CE9178\\">\`</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 또는 xhost -local:host</span></span></code></pre>\\n</div><p>윈도우즈에서 도커를 이용할 경우에 DISPLAY 환경 변수를 다르게 설정해줘야 한다. 아래를 시도해 볼 것을 권한다.</p>\\n<div class=\\"language-bash\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">bash</span><pre class=\\"shiki dark-plus\\" style=\\"background-color:#1E1E1E;color:#D4D4D4\\" tabindex=\\"0\\" dir=\\"ltr\\" v-pre=\\"\\"><code><span class=\\"line\\"><span style=\\"color:#6A9955\\"># 컨테이너 안에서 실행</span></span>\\n<span class=\\"line\\"><span style=\\"color:#569CD6\\">export</span><span style=\\"color:#9CDCFE\\"> DISPLAY</span><span style=\\"color:#D4D4D4\\">=</span><span style=\\"color:#CE9178\\">\`</span><span style=\\"color:#DCDCAA\\">cat</span><span style=\\"color:#CE9178\\"> /etc/resolv.conf </span><span style=\\"color:#D4D4D4\\">|</span><span style=\\"color:#DCDCAA\\"> grep</span><span style=\\"color:#CE9178\\"> nameserver </span><span style=\\"color:#D4D4D4\\">|</span><span style=\\"color:#DCDCAA\\"> awk</span><span style=\\"color:#CE9178\\"> '{print 2}'\`</span><span style=\\"color:#DCDCAA\\">:0</span><span style=\\"color:#D4D4D4\\"> </span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># cat /etc/resolve.conf</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 를 하면 사용하는 네임서버의 목록이 나온다.</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># grep</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 으로 nameserver라는 텍스트가 등장하는 줄을 골라내서</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># awk</span></span>\\n<span class=\\"line\\"><span style=\\"color:#6A9955\\"># 로 ip 부분만 가져온 후에 :0을 붙여서 DISPLAY라는 환경변수에 넣어준 것이다.</span></span></code></pre>\\n</div><h2 id=\\"요약\\" tabindex=\\"-1\\">요약 <a class=\\"header-anchor\\" href=\\"#요약\\" aria-label=\\"Permalink to “요약”\\">&#8203;</a></h2>\\n<ul>\\n<li>윈도윙 시스템은 기본적인 윈도윙을 제공한다.</li>\\n<li>디스플레이 서버는 윈도윙 시스템의 핵심이다.</li>\\n<li>클라이언트인 애플리케이션을 내가 GUI를 볼 수 있게 해주는 디스플레이 서버에 접속시켜야 한다.</li>\\n<li>컨테이너에 디스플레이 통신에 쓰이는 소켓을 마운트해주고, 호스트에서 권한을 주면 된다.</li>\\n</ul>\\n<h2 id=\\"덧붙이는-이야기\\" tabindex=\\"-1\\">덧붙이는 이야기 <a class=\\"header-anchor\\" href=\\"#덧붙이는-이야기\\" aria-label=\\"Permalink to “덧붙이는 이야기”\\">&#8203;</a></h2>\\n<ul>\\n<li>이 방법 외에도 다양한 방법이 있다. 더 알고 싶다면 <a href=\\"http://wiki.ros.org/docker/Tutorials/GUI\\" target=\\"_blank\\" rel=\\"noreferrer\\">ROS의 튜토리얼</a>을 추천한다.</li>\\n<li><code>Xephyr</code>이라는 툴을 이용하면 virtual display를 만들어 이용할 수 있다고 한다. 아직 구력이 부족해 그 효용을 이해하진 못하겠다...</li>\\n<li>Wayland가 X11을 대체하고 주 디스플레이 프로토콜이 될 거라는 이야기가 있지만, 아직까진 X가 대세인 것 같다.</li>\\n<li>윈도우에서 도커 컨테이너를 생성할 때, 컨테이너의 네임서버가 호스트를 바라보게 하는 것 같다. 기회가 있을 때 구체적인 기작을 공부해보고 싶다.</li>\\n</ul>\\n","date":{"time":1583756396645,"string":"March 9, 2020"}},{"title":"번역; ML 프로덕트를 만드는데 필요한 것들에 대한 놀라운 진실","url":"/posts/translation-suprise-of-building-ml/","excerpt":"","date":{"time":1580558625000,"string":"February 1, 2020"}},{"title":"동적계획법에 대해","url":"/posts/dynamic-programming/","excerpt":"<blockquote>\\n<p><em>&quot;(동적계획법은) 프로그래밍 대회 문제에 가장 자주 출현하는 디자인 패러다임&quot;</em>[^종만북_인용1]</p>\\n</blockquote>\\n<br>\\n<p>동적계획법을 공부하기 위해 먼저 알아두면 좋은 개념들을 살펴보고,\\n알고리즘 문제 해결을 위한 이론을 정리한 후에, 간단한 연습문제를 풀어 보았다.</p>\\n","date":{"time":1569068955000,"string":"September 21, 2019"}},{"title":"CommonJS 모듈과 package.json","url":"/posts/modules.html","excerpt":"<p>모듈에 대해 정확히 이해해야 프로젝트를 하는데 용이할 것\\n같아 기본적인 내용을 공부하며 정리하고자 한다.\\nJavascript 언어 자체에서 모듈을 지원하기 시작한 것은\\nECMAScript 6가 처음이다.\\nECMAScript 5까지는 모듈 기능을 구현한 라이브러리를\\n이용해왔다. 이 라이브러리들을 나름의 스탠다드를\\n구현하고 있는데,\\n개중에 중요한 2개는 Node.js의 코어모듈로 구현돼있는\\nCommonJS와 Require.js로 구현돼있는 AMD라고 한다.</p>\\n<table tabindex=\\"0\\">\\n<thead>\\n<tr>\\n<th>스탠다드</th>\\n<th>키워드</th>\\n</tr>\\n</thead>\\n</table>\\n","date":{"time":1559737618435,"string":"June 5, 2019"}},{"title":"밋업; 멜번 AWS 유저 그룹","url":"/posts/awsMelbourne/","excerpt":"<h6 id=\\"meetup-melbourne-aws-user-group\\" tabindex=\\"-1\\"><em>Meetup: Melbourne AWS User Group</em> <a class=\\"header-anchor\\" href=\\"#meetup-melbourne-aws-user-group\\" aria-label=\\"Permalink to “Meetup: Melbourne AWS User Group”\\">&#8203;</a></h6>\\n<h6 id=\\"참석일자-2018-08-29-수요일-6-15pm-8-30pm\\" tabindex=\\"-1\\">참석일자: 2018. 08. 29. 수요일 6:15pm ~ 8:30pm <a class=\\"header-anchor\\" href=\\"#참석일자-2018-08-29-수요일-6-15pm-8-30pm\\" aria-label=\\"Permalink to “참석일자: 2018. 08. 29. 수요일 6:15pm ~ 8:30pm”\\">&#8203;</a></h6>\\n<p>서울에 머물고 있었을 때 2개의 밋업과 1개의 컨퍼런스에 참석한 적이 있다.\\n다른 개발자들은 뭘하고 사는지에 대한 밋업이었던 <strong>개발자 이야기</strong>,\\nVue 이용자들의 모임 <strong>뷰티풀 코리아<sub>Vuetiful</sub> <sub>Korea</sub></strong>, 그리고\\n대규모 AWS 컨퍼런스였던 <strong>AWS Summit</strong>.\\n호주에서 IT 모임을 경험한 건 처음이라 일반화해선 안되지만\\n한국에서와 눈에 띄게 달랐던 점을 적어보고자 한다.</p>\\n<h2 id=\\"타투를-한-개발자들\\" tabindex=\\"-1\\">타투를 한 개발자들 <a class=\\"header-anchor\\" href=\\"#타투를-한-개발자들\\" aria-label=\\"Permalink to “타투를 한 개발자들”\\">&#8203;</a></h2>\\n<p>\\n      <figure>\\n        <img src=\\"./men_in_tattos.jpg\\" alt=\\"멋쟁이 형들\\" />\\n        <figcaption>멋쟁이 형들</figcaption>\\n      </figure>\\n    \\n나이가 지긋해 보이는 진행자 형님들이 타투[^tatto]를 했다는 것,\\n뿐만 아니라 참석자 대부분이 정말 세련되게 잘 꾸며입었다는 것이 새로웠다.\\n내가 알던 개발자의 후줄근한 이미지와 달라서 조금 인지부조화가 왔다.\\n아마 멜버른에서 거주하는 분들이 많이 와서 더 그랬던 것 같다[^melbourne].</p>\\n<h2 id=\\"노골적인-네트워킹\\" tabindex=\\"-1\\">노골적인 네트워킹 <a class=\\"header-anchor\\" href=\\"#노골적인-네트워킹\\" aria-label=\\"Permalink to “노골적인 네트워킹”\\">&#8203;</a></h2>\\n<p>2개의 강연이 끝나고 쉬는 시간 격인 네트워킹 시간을 가졌다.\\n이름이 '네트워킹 시간'이었다...!\\n이 시간이 시작하기 전에 진행자는 네트워킹을 장려하는 멘트를 했고,\\n혹시 구인을 하러 온 사람이 있으면 손을 들어 간단히 소개하라고도 했다.\\n기억나기로,</p>\\n<blockquote>\\n<p>&quot;<em>오늘 A사에서 구인차 사람이 왔습니다. 네, 저기 손들어주신 분이구요.\\n관심 있으시면 네트워킹 시간에 말씀 나누시면 되겠습니다.\\n또 따로 구인하러 오신 분 있나요? 아, 네 말씀해주시죠</em>&quot;</p>\\n</blockquote>\\n<p>그러자 새로운 스타트업을 구상하고 있는 사람이 공동대표를 구한다며\\n관심 있으면 오라고 했다.</p>\\n<p>그렇게 구인구직을 위해 만남을 가지는 분들도 있었고,\\n다른 분들은 자유롭고 자연스럽게 서로 얘기를 나누었다.\\n나도 데이터 엔지니어 두 분과 얘기를 나누다가 구인차 왔다던\\n사람에게 가서 이런저런 얘기를 들었다.\\n물어보는 것마다 친절하게 조목조목 알려줘서\\n편안하게 정보를 얻을 수 있었다.</p>\\n<h2 id=\\"맥주와-피자\\" tabindex=\\"-1\\">맥주와 피자 <a class=\\"header-anchor\\" href=\\"#맥주와-피자\\" aria-label=\\"Permalink to “맥주와 피자”\\">&#8203;</a></h2>\\n<p>\\n      <figure>\\n        <img src=\\"./beer.jpg\\" alt=\\"맥주, 맛있었다\\" />\\n        <figcaption>맥주, 맛있었다</figcaption>\\n      </figure>\\n    \\n역시 개발자 밋업답게 먹을 게 빠지지 않았다.\\n장소와 요기거리 모두 기업들이 후원했기 때문에 참석비가 무료였던 것 같다.\\n재밌었던 건 시작부터 끝까지 병맥주가 계속 제공됐다는 점.\\n한국에 없던 라벨들이라 다 마셔보고 싶었지만,\\n두 병밖에 마시지 못해 아쉬웠다.\\n다들 일상처럼 맥주를 홀짝이며 강연 듣고 얘기하고 하는 게 신기했다.</p>\\n<p>네트워킹 시간이 되자 때맞춰 피자가 도착했다.\\n피자도 너무 맛있었다.\\n다음 달엔 허기진 상태로 참석해야겠다.</p>\\n<h2 id=\\"무지-다국적-무지-남녀노소\\" tabindex=\\"-1\\">무지 다국적, 무지 남녀노소 <a class=\\"header-anchor\\" href=\\"#무지-다국적-무지-남녀노소\\" aria-label=\\"Permalink to “무지 다국적, 무지 남녀노소”\\">&#8203;</a></h2>\\n<p>당연하다 싶다. 여긴 영어를 사용하고, 살기 좋기로 유명한 호주.\\n전세계에서 인력이 모일 것만 같다.\\n호주 사람도 많고, 인도인처럼 보이는 분들,\\n아시안도 몇몇 보였고, 여성 개발자들도 보였다.\\n(근데 확실히 여성 개발자 수가 현저히 적었다.)</p>\\n<p>가장 인상깊었던 건 새하얀 머리를 포니테일로 묶고 검정 가죽 재킷을 입은\\n할아버지가, 강연 주제였던 기술이 실무에 특정 방식으로도 적용 될 수\\n있는지 질문을 던지는 모습이었다[^oldie].</p>\\n<p>위에서 만났다고 한 데이터 엔지니어 2분은 모두 중국인 아주머니셨다.\\n두 분중 한 분은 프론트엔드 개발자로 일하다가 데이터 엔지니어로\\n넘어가셨다고 했다. 하는 일은 데이터베이스 쿼리문 짜시는 거라고…….</p>\\n<h2 id=\\"얻어온-것들\\" tabindex=\\"-1\\">얻어온 것들 <a class=\\"header-anchor\\" href=\\"#얻어온-것들\\" aria-label=\\"Permalink to “얻어온 것들”\\">&#8203;</a></h2>\\n<p>이런 밋업에 자주 참여해서 같은 분야 사람들 많이 만나고,\\n내가 발전할 수 있는 기회를 잘 잡는 게 중요하겠다고 느꼈다.</p>\\n<details><summary> 읽으면 좋을 것 같은 책들 (프로젝트 관리) </summary>\\n<p>\\n      <figure>\\n        <img src=\\"./books.jpg\\" alt=\\"\\" />\\n        <figcaption></figcaption>\\n      </figure>\\n    </p>\\n</details>\\n<table tabindex=\\"0\\">\\n<thead>\\n<tr>\\n<th>키워드</th>\\n<th>내가 이해한 뜻</th>\\n</tr>\\n</thead>\\n</table>\\n","date":{"time":1535890091000,"string":"September 2, 2018"}},{"title":"독후감; a Matter of Life","url":"/posts/book-a-matter-of-life/","excerpt":"<h6 id=\\"author-jeffrey-brown\\" tabindex=\\"-1\\">Author: Jeffrey Brown <a class=\\"header-anchor\\" href=\\"#author-jeffrey-brown\\" aria-label=\\"Permalink to “Author: Jeffrey Brown”\\">&#8203;</a></h6>\\n<h6 id=\\"period-23-08-2018\\" tabindex=\\"-1\\">period: 23.08.2018 <a class=\\"header-anchor\\" href=\\"#period-23-08-2018\\" aria-label=\\"Permalink to “period: 23.08.2018”\\">&#8203;</a></h6>\\n<h6 id=\\"place-city-library-in-melbourne\\" tabindex=\\"-1\\">place: City Library in Melbourne <a class=\\"header-anchor\\" href=\\"#place-city-library-in-melbourne\\" aria-label=\\"Permalink to “place: City Library in Melbourne”\\">&#8203;</a></h6>\\n<p>\\n      <figure>\\n        <img src=\\"./picture_of_book.jpg\\" alt=\\"책표지\\" />\\n        <figcaption>책표지</figcaption>\\n      </figure>\\n    </p>\\n<p>목사의 아들, 미국인, 만화가, 아버지, 무신론자가 그린 독백조의 자전적 그래픽 노벨</p>\\n","date":{"time":1535285557000,"string":"August 26, 2018"}},{"title":"SP; 라인 바이 라인!","url":"/posts/linebyline/","excerpt":"","date":{"time":1532952220000,"string":"July 30, 2018"}},{"title":"왜 나는 넘버게임을 풀지 못했나","url":"/posts/numbergame-comment-md/","excerpt":"","date":{"time":1529496302000,"string":"June 20, 2018"}},{"title":"게하의 일을 자동화해보았다","url":"/posts/loventis-noshow-automation/","excerpt":"","date":{"time":1528373956000,"string":"June 7, 2018"}},{"title":"번역; 게으른 계산이란?","url":"/posts/translation-lazy-evaluation.html","excerpt":"","date":{"time":1528203383000,"string":"June 5, 2018"}}]`),L={class:"a4 mx-auto shadow-md bg-white"},B=["href"],F=g({__name:"PostList",setup(C){const{frontmatter:h}=u(),p=c=>{let s={year:"numeric",month:"2-digit",day:"2-digit"};return new Date(c).toLocaleString("default",s)};return(c,s)=>(n(),l("div",L,[s[0]||(s[0]=a("h1",null,"글",-1)),a("ul",null,[(n(!0),l(b,null,m(D(k),o=>(n(),l("li",null,[a("a",{href:o.url},i(o.title),9,B),a("span",null,i(p(o?.date?.time)),1)]))),256))])]))}}),J=P(F,[["__scopeId","data-v-29d336f7"]]),U={class:"a4 relative mx-auto shadow-md bg-white antialiased"},N={class:"text-center"},T={key:0,class:"date"},W=g({__name:"Post",setup(C){const{frontmatter:h,page:p}=u(),{frontmatter:c}=u(),s=I();function o(){return k.findIndex(e=>e.url===s.path)}const d=y(()=>k[o()]?.date);console.log(d.value);const r=y(()=>{let e={year:"numeric",month:"2-digit",day:"2-digit"};return new Date(d.value?.time).toLocaleString("default",e)}),f=y(()=>r.value!=="Invalid Date");return y(()=>"https://developers.facebook.com/docs/plugins/comments#"+p.title),S(()=>{(function(){var e=document,t=e.createElement("script");t.src="https://https-jonghunbok-github-io.disqus.com/embed.js",t.setAttribute("data-timestamp",+new Date),(e.head||e.body).appendChild(t)})()}),(e,t)=>{const E=M("Content");return n(),l("div",null,[a("div",U,[a("h1",N,i(D(p).title),1),f.value?(n(),l("div",T,i(r.value),1)):X("",!0),x(E)]),t[0]||(t[0]=a("div",{class:"a5-landscape mx-auto my-4 shadow-md bg-white"},[a("div",{id:"disqus_thread"})],-1))])}}}),v=JSON.parse('[{"url":"/notes/20251026.html","excerpt":"","tags":["쪽글"],"date":{"time":1761480000000,"string":"October 26, 2025"}}]'),G={class:"a5-landscape relative mx-auto shadow-md bg-white antialiased"},O={class:"date-and-tags"},R={key:0,class:"mr-2"},Y=g({__name:"Note",setup(C){const{frontmatter:h,page:p}=u(),{frontmatter:c}=u(),s=I();function o(){return v.findIndex(e=>e.url===s.path)}const d=y(()=>v[o()]?.date),r=y(()=>{let e={year:"numeric",month:"2-digit",day:"2-digit"};return new Date(d.value?.time).toLocaleString("default",e)}),f=y(()=>r.value!=="Invalid Date");return y(()=>"https://developers.facebook.com/docs/plugins/comments#"+p.title),S(()=>{(function(){var e=document,t=e.createElement("script");t.src="https://https-jonghunbok-github-io.disqus.com/embed.js",t.setAttribute("data-timestamp",+new Date),(e.head||e.body).appendChild(t)})()}),(e,t)=>{const E=M("Content");return n(),l("div",null,[a("div",G,[a("div",O,[f.value?(n(),l("div",R,i(r.value),1)):X("",!0),a("div",null,[(n(!0),l(b,null,m(D(h).tags,_=>(n(),l("span",{key:_,class:"tag"},"#"+i(_),1))),128))])]),x(E,{class:"content"})]),t[0]||(t[0]=a("div",{class:"a5-landscape mx-auto my-4 shadow-md bg-white"},[a("div",{id:"disqus_thread"})],-1))])}}}),z={class:"a4 mx-auto shadow-md bg-white"},K=["href"],Z={class:"ml-2"},H=g({__name:"NoteList",setup(C){const{frontmatter:h}=u(),p=c=>{let s={year:"numeric",month:"2-digit",day:"2-digit"};return new Date(c).toLocaleString("default",s)};return(c,s)=>(n(),l("div",z,[s[0]||(s[0]=a("h1",null,"쪽글",-1)),a("ul",null,[(n(!0),l(b,null,m(D(v),o=>(n(),l("li",null,[a("a",{href:o.url},[(n(!0),l(b,null,m(o.tags,d=>(n(),l("span",{key:d}," #"+i(d),1))),128)),a("span",Z,i(p(o?.date?.time)),1)],8,K)]))),256))])]))}}),Q=P(H,[["__scopeId","data-v-47d7dbc1"]]),ss={class:"mx-auto my-0"},ns={class:"py-16"},as=g({__name:"Layout",setup(C){const{page:h,frontmatter:p}=u();return(c,s)=>(n(),l("div",ss,[x($,{class:"float-right clearfix mr-4 md:mr-24"}),a("div",ns,[D(p).type==="PostList"?(n(),A(J,{key:0})):D(p).type==="NoteList"?(n(),A(Q,{key:1})):D(p).type==="note"?(n(),A(Y,{key:2})):(n(),A(W,{key:3}))]),s[0]||(s[0]=a("link",{href:"https://fonts.googleapis.com/css?family=Nanum+Myeongjo&display=swap",rel:"stylesheet"},null,-1)),s[1]||(s[1]=a("link",{href:"https://fonts.googleapis.com/css2?family=Permanent+Marker&display=swap",rel:"stylesheet"},null,-1))]))}}),es={Layout:as};export{es as R};
